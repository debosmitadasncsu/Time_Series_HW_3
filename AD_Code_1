#------------------------------------#
#        Correlation Functions       #
#------------------------------------#

# Needed Libraries for Analysis #
library(forecast)
library(fma)
library(tseries)
library(expsmooth)
library(lmtest)
library(zoo)
library(dyn)
library(gdata)
library(dplyr)
library(stringr) 
library(ggplot2)



# Saving File Locations and Uploading SAS File #
setwd("C:/Users/Andy Dotter/Documents/Fall_2018/Fall_1/Time Series_Forecasting/Homework")

well_data<-read.csv("G-2866_T.csv")%>%
    rename(date=Ã¯..date)%>%
    mutate(date = as.character(date))%>%
    select(-Well_ft, -Code)%>%
    group_by(time)%>%
    mutate(new_time=as.character(time),
           hour=str_split(new_time,":")[[1]][1],
           minute=str_split(new_time,":")[[1]][2])%>%
    ungroup(time)%>%
    group_by(date)%>%
    mutate(month=str_split(date,"/")[[1]][1],
           day=str_split(date,"/")[[1]][2],
           year=str_split(date,"/")[[1]][3])%>%
    ungroup(date)%>%
    mutate(minute=as.integer(minute),hour=as.integer(hour),day=as.integer(day),
           month=as.integer(month),year=as.integer(year))%>%
    filter(!(year==2018&month==6&day>8)&
               !(year==2018&month==6&day==8&hour>10)&
               !(year==2018&month==6&day==8&hour==9&minute>30))%>%
    arrange(year,month,day,hour)%>%
    group_by(year,month,day, hour, tz_cd)%>%
    summarise(Corrected_mean=mean(Corrected))%>%
    ungroup(year,month,day,hour)

new_well_data<-well_data%>%
    group_by(year,month)%>%
    summarize(month_mean=mean(Corrected_mean),
              numb=n())%>%
    arrange(year,month)

new_well_data$Date <- as.yearmon(paste(new_well_data$year, new_well_data$month), "%Y %m")
#Create a training and test split, where last 6 months is the test set (all of 2018) 

training <- new_well_data %>% filter(year!=2018)
test <- new_well_data %>% filter(year==2018)

#create a time series object - decomposition 
well_All <- ts(new_well_data$month_mean, start=c(2007,10), frequency = 12)
well_t <- ts(training$month_mean, start = c(2007, 10), frequency = 12)  
well_V <- ts(test$month_mean, start = 2018, frequency = 12 )

######Both trend and season
#X.reg=cbind(x,season)
#reg.model=lm(well_All~new_well_data[,5])
#summary(reg.model)
#y3.ts=ts(y3,frequency = 4)
#arima.model=Arima(well_All,xreg=new_well_data[,5],order=c(0,0,0))
#summary(arima.model)
#res.arima=arima.model$residuals
#res.reg=reg.model$residuals
#plot(res.arima,res.reg)
#fit.y=arima.model$fitted
#plot(new_well_data[,5],well_All,type='l')
#lines(fit.y)

#View(well_All)

# Augmented Dickey-Fuller Testing #
adf.test(well_All, alternative = "stationary", k = 2)

ADF.Pvalues <- rep(NA, 3)
for(i in 0:2){
    ADF.Pvalues[i+1] <- adf.test(well_All, alternative = "stationary", k = i)$p.value
}

# Automated Differencing Test Function #
ndiffs(well_All)

# Automated Seasonal Differencing Test Function #
nsdiffs(well_All)
ndiffs(diff(well_All, lag = 12))


# Lag Plot of Y #
lag.plot(well_All, lag = 2, main = "Scatterplots of Y with First 2 Lags", diag = FALSE, layout = c(1, 2))

# Augmented Dickey fuller Test
adf.test(well_All, nlag = 2, output = TRUE)


# Correlation Functions #
Acf(well_All, lag = 10)$acf
Pacf(well_All, lag = 10)$acf

Acf(well_All, lag = 40, main = "Autocorrelation Plot for Well Data")$acf
Pacf(well_All, lag = 40, main = "Partial Autocorrelation Plot for Well Data")$acf

# Ljung-Box Test for Steel ES Model #
View(well_All[,3])

SES.well_All <- ses(well_All[,3], initial = "optimal", h = 24)
White.LB <- rep(NA, 10)
for(i in 1:10){
    White.LB[i] <- Box.test(SES.well_All$residuals, lag = i, type = "Lj", fitdf = 1)$p.value
}

White.LB <- pmin(White.LB, 0.2)
barplot(White.LB, main = "Ljung-Box Test P-values", ylab = "Probabilities", xlab = "Lags", ylim = c(0, 0.2))
abline(h = 0.01, lty = "dashed", col = "black")
abline(h = 0.05, lty = "dashed", col = "black")
